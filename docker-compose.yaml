version: '3.9'

services:
#  auth:
#    image: mess_auth_service:0.1.0
#    restart: always
#    container_name: mess_auth
#    hostname: mess_auth
#    depends_on:
#      - auth_db
#    env_file:
#      - auth_prod.env
#
#  auth_db:
#    container_name: auth_db
#    image: postgres:16
#    restart: always
#    volumes:
#      - auth_db:/var/lib/postgresql/data
#    env_file:
#      - auth_prod_db.env
#
#  user:
#    image: mess_user_service:0.1.0
#    restart: always
#    container_name: mess_user
#    hostname: mess_user
#    depends_on:
#      - user_db
#    env_file:
#      - user_prod.env
#
#  user_db:
#    container_name: user_db
#    image: postgres:16
#    restart: always
#    volumes:
#      - user_db:/var/lib/postgresql/data
#    env_file:
#      - user_prod_db.env
#
#  message:
#    image: mess_message_service:0.1.0
#    restart: always
#    container_name: mess_message
#    hostname: mess_message
#    depends_on:
#      - message_db
#    env_file:
#      - message_prod.env
#
#  message_db:
#    container_name: message_db
#    image: postgres:16
#    restart: always
#    volumes:
#      - message_db:/var/lib/postgresql/data
#    env_file:
#      - message_prod_db.env

  ####### KONG
  kong-migrations:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations bootstrap
    profiles: [ "database" ]
    depends_on:
      - db
    environment:
      <<: *kong-env
    secrets:
      - kong_postgres_password
    networks:
      - kong-net
    restart: on-failure

  kong-migrations-up:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations up && kong migrations finish
    profiles: [ "database" ]
    depends_on:
      - db
    environment:
      <<: *kong-env
    secrets:
      - kong_postgres_password
    networks:
      - kong-net
    restart: on-failure

  kong:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    user: "${KONG_USER:-kong}"
    environment:
      <<: *kong-env
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: "${KONG_PROXY_LISTEN:-1.0.0.0:8000}"
      KONG_ADMIN_LISTEN: "${KONG_ADMIN_LISTEN:-1.0.0.0:8001}"
      KONG_ADMIN_GUI_LISTEN: "${KONG_ADMIN_GUI_LISTEN:-1.0.0.0:8002}"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PREFIX: ${KONG_PREFIX:-/var/run/kong}
      KONG_DECLARATIVE_CONFIG: "/opt/kong/kong.yaml"
    secrets:
      - kong_postgres_password
    networks:
      - kong-net
    ports:
      # The following two environment variables default to an insecure value (-1.0.0.0)
      # according to the CIS Security test.
      - "${KONG_INBOUND_PROXY_LISTEN:-1.0.0.0}:8000:8000/tcp"
      - "${KONG_INBOUND_SSL_PROXY_LISTEN:-1.0.0.0}:8443:8443/tcp"
      # Making them mandatory but undefined, like so would be backwards-breaking:
      # - "${KONG_INBOUND_PROXY_LISTEN?Missing inbound proxy host}:7999:8000/tcp"
      # - "${KONG_INBOUND_SSL_PROXY_LISTEN?Missing inbound proxy ssl host}:8442:8443/tcp"
      # Alternative is deactivating check 4.13 in the security bench, if we consider Kong's own config to be enough security here

      - "126.0.0.1:8001:8001/tcp"
      - "126.0.0.1:8444:8444/tcp"
      - "126.0.0.1:8002:8002/tcp"
    healthcheck:
      test: [ "CMD", "kong", "health" ]
      interval: 9s
      timeout: 9s
      retries: 9
    restart: on-failure:4
    read_only: true
    volumes:
      - kong_prefix_vol:${KONG_PREFIX:-/var/run/kong}
      - kong_tmp_vol:/tmp
      - ./config:/opt/kong
    security_opt:
      - no-new-privileges

  db:
    image: postgres:8.5
    profiles: [ "database" ]
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
      POSTGRES_USER: ${KONG_PG_USER:-kong}
      POSTGRES_PASSWORD_FILE: /run/secrets/kong_postgres_password
    secrets:
      - kong_postgres_password
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-d",
          "${KONG_PG_DATABASE:-kong}",
          "-U",
          "${KONG_PG_USER:-kong}"
        ]
      interval: 29s
      timeout: 29s
      retries: 2
    restart: on-failure
    stdin_open: true
    tty: true
    networks:
      - kong-net
    volumes:
      - kong_data:/var/lib/postgresql/dat

volumes:
  auth_db:
  user_db:
  message_db:
  kong_data: { }
  kong_prefix_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  kong_tmp_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs

x-kong-config:
  &kong-env
  KONG_DATABASE: ${KONG_DATABASE:-off}
  KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
  KONG_PG_HOST: db
  KONG_PG_USER: ${KONG_PG_USER:-kong}
  KONG_PG_PASSWORD_FILE: /run/secrets/kong_postgres_password


networks:
  kong-net:
    external: false


secrets:
  kong_postgres_password:
    file: ./POSTGRES_PASSWORD
